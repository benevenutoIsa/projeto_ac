RS      equ     P1.3   
          EN      equ     P1.2    
       
      org 0000h
 	LJMP START
       
      org 0030h
      START:
 	acall lcd_init ; inicia o LCD
 	ACALL bemVindo ; chama a função de bem vindo
 	ACALL opcoesDisponiveis ;mostra as opções disponíveis
 	ACALL escolheOpcao ;ok
 	ACALL pedidoConfirmado ;ok
 	ACALL enviadoProducao  ;ok
 	ACALL processando ;ok
	ACALL realizaPagamento ;ok
	ACALL escolhePagamento ;ok
	ACALL digiteSuaSenha
	ACALL pedeSenha
 	ACALL confimaPagamento ;ok
 	ACALL enviado ;ok
 	JMP $
       
       
      ;----------------------------------parte do lcd (não mexer)
      lcd_init:
       
 	CLR RS		
       
 	CLR P1.7		
 	CLR P1.6		
 	SETB P1.5		
 	CLR P1.4	
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
      					
 	SETB EN		
 	CLR EN		
      				
       
 	SETB P1.7	
       
 	SETB EN		
 	CLR EN	
      				
 	CALL delay		
       
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN	
       
 	SETB P1.6		
 	SETB P1.5	
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
       
 	CLR P1.7		
 	CLR P1.6		
	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	SETB P1.7		
 	SETB P1.6		
 	SETB P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
 	RET
       
       
      sendCharacter:
 	SETB RS  		
 	MOV C, ACC.7		
 	MOV P1.7, C			
 	MOV C, ACC.6		
 	MOV P1.6, C			
 	MOV C, ACC.5	
 	MOV P1.5, C			
 	MOV C, ACC.4		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	MOV C, ACC.3		
 	MOV P1.7, C			
 	MOV C, ACC.2		
 	MOV P1.6, C			
 	MOV C, ACC.1		
 	MOV P1.5, C	
 	MOV C, ACC.0		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	CALL delay	
 	RET
       
       
      ;|--------------------------------------------------------------------------------------|
      ;|linha 1 |  | 01 | 02 | 03 | 04 |05 | 06 | 07 | 08 | 09 |0A | 0B | 0C | 0D | 0E | 0F |
      ;|linha 2 | 40 | 41 | 42 | 43 | 44 |45 | 46 | 47 | 48 | 49 |4A | 4B | 4C | 4D | 4E | 4F |
      ;|--------------------------------------------------------------------------------------|
      posicionaCursor:
 	CLR RS	         
 	SETB P1.7		    
 	MOV C, ACC.6		
 	MOV P1.6, C			
 	MOV C, ACC.5		
 	MOV P1.5, C			
 	MOV C, ACC.4		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	MOV C, ACC.3		
 	MOV P1.7, C			
 	MOV C, ACC.2
 	MOV P1.6, C			
 	MOV C, ACC.1		
 	MOV P1.5, C			
 	MOV C, ACC.0		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	CALL delay	
 	RET
       
       
       
      retornaCursor:
 	CLR RS	      
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4	
       
 	SETB EN		
 	CLR EN		
       
 	CLR P1.7		
 	CLR P1.6		
 	SETB P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
 	RET
       
       
       
      clearDisplay:
 	CLR RS	      
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay
 	RET
       
       
      delay:
 	MOV R0, #50
 	DJNZ R0, $
 	RET
       
      ;---------------------------------- fim inicialização lcd
       
      ;---------------------------------- bem vindo no displaya
      bemVindo:
 	MOV A, #06h
 	ACALL posicionaCursor 
 	MOV A, #'B'
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'M'
 	ACALL sendCharacter	
 	CLR A
 	mov A, #45h
 	ACALL posicionaCursor
 	MOV A, #'V'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter

 	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

 	ACALL delayDisplay
 	RET
      ;---------------------------------- 
       
      ;---------------------------------- opções disponiveis no display
      opcoesDisponiveis:
	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

	ACALL delayDisplay

 	MOV A, #04H
 	ACALL posicionaCursor
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter
 	CLR A
 	MOV A, #42H
 	ACALL posicionaCursor
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'V'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter
 	ACALL delay
       
 	ACALL clearDisplay
 	ACALL delayDisplay

       
 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'1'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	CLR A
      	
 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'2'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	CLR A
      	
 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'3'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'J'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	CLR A
      	
 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'4'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'H'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	CLR A
       
 	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

 	ACALL delayDisplay

 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'S'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
	CLR A

 	MOV A, #46H
 	ACALL posicionaCursor
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	CLR A

 	RET
      ;---------------------------------- 
       
      ;---------------------------------- implementação dos botões para escolher o bolo
      escolheOpcao:
      	; Configura as linhas de controle como entrada
	MOV P2, #0FFH        ; Configura P2 como entrada (todos os bits em 1)
  	MOV A, P2            ; Lê o valor de P2

    ; Verifica se nenhum botão foi pressionado (todos os bits de P2 em 1)
  	CJNE A, #0FFH, CHECA_BOTOES   ; Se A não for 0xFF, verifica os botões
  	SJMP escolheOpcao                     
		
		; Mantenha as outras linhas como saída
       
      	; Aguarde até que um botão seja pressionado
CHECA_BOTOES:
    ; Verifica qual botão está pressionado, pulando para a opção correspondente
    JNB P2.0, OPCAO1   ; Se P2.0 for 0, vai para OPCAO1
    JNB P2.1, OPCAO2   ; Se P2.1 for 0, vai para OPCAO2
    JNB P2.2, OPCAO3   ; Se P2.2 for 0, vai para OPCAO3
    JNB P2.3, OPCAO4   ; Se P2.3 for 0, vai para OPCAO4

    SJMP escolheOpcao          ; Retorna ao loop principal se nenhum botão está pressionado
     ; Volte a verificar se um botão foi pressionado
       
      ; Definindo as opções
      OPCAO1:
      	; Exibir opção 1: "FUBA"
 	ACALL clearDisplay
 	ACALL delayDisplay

 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	ACALL delay
	RET
       
      OPCAO2:
      	; Exibir opção 2: "CENOURA"
 	ACALL clearDisplay
 	ACALL delayDisplay

 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
	ACALL delay
	RET
       
      OPCAO3:
      	; Exibir opção 3: "LARANJA"
 	ACALL clearDisplay
 	ACALL delayDisplay

 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'J'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	ACALL delay
	RET
       
      OPCAO4:
      	; Exibir opção 4: "CHOCOLOTE"
 	ACALL clearDisplay
 	ACALL delayDisplay

 	MOV A, #02H
 	ACALL posicionaCursor
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'H'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	ACALL delay
	RET
      	
      ;---------------------------------- 
       
      ;----------------------------------pedido confimado no display
      pedidoConfirmado:
	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	CLR P1.7

	ACALL delayDisplay

 	mov A, #05h
 	ACALL posicionaCursor 
 	MOV A, #'P'
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'D'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	CLR A
 	mov A, #44h
 	ACALL posicionaCursor 
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
  	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	CLR P1.6
 	CLR P1.7

 	ACALL delayDisplay

 	RET
      ;----------------------------------
       
      ;---------------------------------- pedido enviado para produção display
      enviadoProducao:
 	MOV A, #02h
 	ACALL posicionaCursor 
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'N'
 	ACALL sendCharacter	
 	MOV A, #'V'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter	
 	MOV A, #'P'
 	ACALL sendCharacter	
 	MOV A, #'A'
 	ACALL sendCharacter	
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	
	CLR A
 	mov A, #44h
 	ACALL posicionaCursor 
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
  	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

 	ACALL delayDisplay
 	RET
       
      ;---------------------------------- confimando, em produção e  produção finalizada no display separadamente
      processando: 	
 	CLR A
 	MOV A, #00h
 	ACALL posicionaCursor 
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'M'
 	ACALL sendCharacter	
 	MOV A, #' '
 	ACALL sendCharacter	
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter

	ACALL delayDisplay
 	ACALL clearDisplay
 	ACALL delayDisplay

 	CLR A
 	MOV A, #05h
 	ACALL posicionaCursor 
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	CLR A 
 	mov A, #44h
 	ACALL posicionaCursor 
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
  	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'Z'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
      	
 	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	CLR P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

 	ACALL delayDisplay
 	RET
      ;----------------------------------

realizaPagamento:
	MOV A, #02h
	ACALL posicionaCursor
	MOV A, #'M'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	MOV A, #' '
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	CLR A

	MOV A, #44h
	ACALL posicionaCursor
	MOV A, #'P'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	MOV A, #'G'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	MOV A, #'M'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'N'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	CLR A

	ACALL clearDisplay
	ACALL delayDisplay

	MOV A, #04h
	ACALL posicionaCursor
	MOV A, #'1'
	ACALL sendCharacter
	MOV A, #'.'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'B'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter


	MOV A, #04h
	ACALL posicionaCursor
	MOV A, #'2'
	ACALL sendCharacter
	MOV A, #'.'
	ACALL sendCharacter
	MOV A, #'C'
	ACALL sendCharacter
	MOV A, #'R'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	CLR A

 	ACALL clearDisplay
 	ACALL delayDisplay
	
	RET	
       
      ;---------------------------------- mensagem de confirmação do pagamento no display
confimaPagamento:
 	MOV A, #02h
 	ACALL posicionaCursor 
 	MOV A, #'C'
 	ACALL sendCharacter	
 	MOV A, #'O'
 	ACALL sendCharacter	
 	MOV A, #'N'
 	ACALL sendCharacter	
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'M'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	CLR A
 	mov A, #43h
 	ACALL posicionaCursor
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'G'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'M'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	CLR P1.3
 	CLR P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

 	ACALL delayDisplay
 	RET
      ;----------------------------------
       
      ;---------------------------------- mensagem de pedido enviado no display
      enviado:
 	MOV A, #02h
 	ACALL posicionaCursor 
 	MOV A, #'S'
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'U'
 	ACALL sendCharacter	
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'D'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	CLR A
 	mov A, #41h
 	ACALL posicionaCursor
 	MOV A, #'J'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'V'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	ACALL clearDisplay

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

	ACALL delay100

	CLR P1.0
 	CLR P1.1
 	CLR P1.2
 	CLR P1.3
 	CLR P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

	ACALL delay100

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

	ACALL delay100

	CLR P1.0
 	CLR P1.1
 	CLR P1.2
 	CLR P1.3
 	CLR P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

	ACALL delay100

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

	ACALL delay100

	CLR P1.0
 	CLR P1.1
 	CLR P1.2
 	CLR P1.3
 	CLR P1.4
 	CLR P1.5
 	CLR P1.6
 	CLR P1.7

	ACALL delay100

	SETB P1.0
 	SETB P1.1
 	SETB P1.2
 	SETB P1.3
 	SETB P1.4
 	SETB P1.5
 	SETB P1.6
 	SETB P1.7

 	ACALL delayDisplay
 	RET

delayDisplay:
	MOV R1, #10            ; Número de iterações externas
delay_outer:
  	MOV R0, #255           ; Número de iterações internas
delay_inner:
  	DJNZ R0, delay_inner 
	DJNZ R1, delay_outer  
  	RET    

delay100:
	MOV R0, #100
	DJNZ R0, $
	RET

escolhePagamento:
		; Configura as linhas de controle como entrada
	MOV P2, #0FFH        ; Configura P2 como entrada (todos os bits em 1)
  	MOV A, P2            ; Lê o valor de P2

    ; Verifica se nenhum botão foi pressionado (todos os bits de P2 em 1)
  	CJNE A, #0FFH, CHECABOTOES   ; Se A não for 0xFF, verifica os botões
  	SJMP escolhePagamento                     
		
		; Mantenha as outras linhas como saída
       
      	; Aguarde até que um botão seja pressionado
CHECABOTOES:
    ; Verifica qual botão está pressionado, pulando para a opção correspondente
    JNB P2.0, OPCAO_1   ; Se P2.0 for 0, vai para OPCAO1
    JNB P2.1, OPCAO_2   ; Se P2.1 for 0, vai para OPCAO2

    SJMP escolhePagamento          ; Retorna ao loop principal se nenhum botão está pressionado
     ; Volte a verificar se um botão foi pressionado
       
      ; Definindo as opções

OPCAO_1:
 	ACALL clearDisplay
 	ACALL delayDisplay

	MOV A, #04h
	ACALL posicionaCursor
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'B'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	CLR A
RET

OPCAO_2:
 	ACALL clearDisplay
 	ACALL delayDisplay

	MOV A, #04h
	ACALL posicionaCursor
	ACALL sendCharacter
	MOV A, #'C'
	ACALL sendCharacter
	MOV A, #'R'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	CLR A
RET

digiteSuaSenha:
	ACALL clearDisplay
 	ACALL delayDisplay

	MOV A, #04h
	ACALL posicionaCursor
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'G'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #' '
	ACALL sendCharacter
	MOV A, #'S'
	ACALL sendCharacter
	MOV A, #'U'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	CLR A

	MOV A, #44h
	ACALL posicionaCursor
	MOV A, #'S'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'N'
	ACALL sendCharacter
	MOV A, #'H'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	CLR A


RET

pedeSenha:
	MOV TMOD, #20H         ; Timer 1 em modo 2 (auto-reload)
	MOV TH1, #-3           ; Configura para 9600 bps com 11.0592 MHz
	MOV SCON, #50H         ; Modo 1, 8 bits de dados, UART ativada
	SETB TR1               ; Inicia o Timer 1
  	ACALL UART_Read    ; Lê um caractere via UART
 	ACALL UART_Write
	RET   ; Escreve o caractere de volta via UART

; Sub-rotina para ler caractere via UART
UART_Read:
    CLR A                  ; Limpa acumulador
Wait_RX:
    JNB RI, Wait_RX        ; Espera até que o caractere seja recebido
    MOV A, SBUF            ; Move o caractere recebido para o acumulador
    CLR RI                 ; Limpa o flag de recepção
    RET

; Sub-rotina para enviar caractere via UART
UART_Write:
    MOV SBUF, A            ; Move o valor do acumulador para SBUF para transmissão
Wait_TX:
    JNB TI, Wait_TX        ; Espera até que a transmissão seja concluída
    CLR TI                 ; Limpa o flag de transmissão
    RET




      


	                
      ;----------------------------------
