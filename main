RS      equ     P1.3   
          EN      equ     P1.2    
       
      org 0000h
 	LJMP START
       
      org 0030h
      START:
 	acall lcd_init ; inicia o LCD
 	ACALL bemVindo ; chama a função de bem vindo
 	ACALL opcoesDisponiveis ;mostra as opções disponíveis
 	ACALL escolheOpcao ; função para escolher uma opção de sabor do bolo
 	ACALL pedidoConfirmado ; pedido confirmado
 	ACALL enviadoProducao  ; exibe enviado para produção
 	ACALL processando ; precessa o pedido e exibe pedido feito
	ACALL realizaPagamento ; exibe que será realizado o pagamento
	ACALL escolhePagamento ; escolhe a opção de pagamento
	ACALL digiteSuaSenha; exibe digite sua senha
	ACALL pedeSenha ; recebe a senha do usuário
 	ACALL confimaPagamento ; exibe pagamento confirmado
 	ACALL enviado ; exibe pedido enviado
 	JMP $
       
       
      ;----------------------------------parte do lcd (não mexer)
      lcd_init:
       
 	CLR RS		
       
 	CLR P1.7		
 	CLR P1.6		
 	SETB P1.5		
 	CLR P1.4	
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
      					
 	SETB EN		
 	CLR EN		
      				
       
 	SETB P1.7	
       
 	SETB EN		
 	CLR EN	
      				
 	CALL delay		
       
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN	
       
 	SETB P1.6		
 	SETB P1.5	
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
       
 	CLR P1.7		
 	CLR P1.6		
	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	SETB P1.7		
 	SETB P1.6		
 	SETB P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
 	RET
       
       
      sendCharacter:
 	SETB RS  		
 	MOV C, ACC.7		
 	MOV P1.7, C			
 	MOV C, ACC.6		
 	MOV P1.6, C			
 	MOV C, ACC.5	
 	MOV P1.5, C			
 	MOV C, ACC.4		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	MOV C, ACC.3		
 	MOV P1.7, C			
 	MOV C, ACC.2		
 	MOV P1.6, C			
 	MOV C, ACC.1		
 	MOV P1.5, C	
 	MOV C, ACC.0		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	CALL delay	
 	RET
       
       
      ;|--------------------------------------------------------------------------------------|
      ;|linha 1 |  | 01 | 02 | 03 | 04 |05 | 06 | 07 | 08 | 09 |0A | 0B | 0C | 0D | 0E | 0F |
      ;|linha 2 | 40 | 41 | 42 | 43 | 44 |45 | 46 | 47 | 48 | 49 |4A | 4B | 4C | 4D | 4E | 4F |
      ;|--------------------------------------------------------------------------------------|
      posicionaCursor:
 	CLR RS	         
 	SETB P1.7		    
 	MOV C, ACC.6		
 	MOV P1.6, C			
 	MOV C, ACC.5		
 	MOV P1.5, C			
 	MOV C, ACC.4		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	MOV C, ACC.3		
 	MOV P1.7, C			
 	MOV C, ACC.2
 	MOV P1.6, C			
 	MOV C, ACC.1		
 	MOV P1.5, C			
 	MOV C, ACC.0		
 	MOV P1.4, C			
       
 	SETB EN			
 	CLR EN			
       
 	CALL delay	
 	RET
       
       
       
      retornaCursor:
 	CLR RS	      
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4	
       
 	SETB EN		
 	CLR EN		
       
 	CLR P1.7		
 	CLR P1.6		
 	SETB P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay		
 	RET
       
       
       
      clearDisplay:
 	CLR RS	      
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	CLR P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CLR P1.7		
 	CLR P1.6		
 	CLR P1.5		
 	SETB P1.4		
       
 	SETB EN		
 	CLR EN		
       
 	CALL delay
 	RET
       
       
      delay:
 	MOV R0, #50
 	DJNZ R0, $
 	RET
       
      ;---------------------------------- fim inicialização lcd
       
      ;---------------------------------- bem vindo no displaya
      bemVindo:
 	MOV A, #06h ; move 06 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 6

 	MOV A, #'B' ; exibe "BEM" no display
 	ACALL sendCharacter 
 	MOV A, #'E' 
 	ACALL sendCharacter
 	MOV A, #'M'
 	ACALL sendCharacter	

 	CLR A ; limpa o valor de A

 	MOV A, #45h ; move 45 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 45

 	MOV A, #'V' ; exibe "VINDO" no display
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter

 	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

 	ACALL delayDisplay ;chama o delay do display
 	RET


      ;---------------------------------- 
       
      ;---------------------------------- opções disponiveis no display


      opcoesDisponiveis:
	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

	ACALL delayDisplay ; chama o delay do display

 	MOV A, #04H ; move 04 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 4

 	MOV A, #'O' ; exibe "OPÇÕES"  no display
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter

 	CLR A ; limpa o o valor armazenado no A

 	MOV A, #42H ; move 42 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 42

 	MOV A, #'D' ; exibe "DISPONIVEIS" no display
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'V'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'S'
 	ACALL sendCharacter

 	ACALL delay ;chama o delay
       
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

       
 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ;posiciona o cursor na posição 2

 	MOV A, #'0' ; exibe "0.FUBA" no display
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter

 	CLR A ;limpa a o A
      	
 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ;posicona o cursor na posição 2

 	MOV A, #'1' ;exibe "1.CENOURA" no display
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter

 	CLR A ;limpa o A
      	
 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'2'  ;exibe "2.LARANJA" no display
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'J'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	
	CLR A ;limpa o A
      	
 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'3' ; ;exibe "3.CHOCOLATE" no display
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'H'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	
	CLR A ;limpa o A
       
 	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'S' ;exibe "SELECIONE" no display
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter

	CLR A ;limpa o A

 	MOV A, #46H ; move 46 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 46

 	MOV A, #'O' ;exibe "OPCOES" no display
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	CLR A; limpa o A

 	RET


      ;---------------------------------- 
       
      ;---------------------------------- implementação dos botões para escolher o bolo


    escolheOpcao:
	MOV P2, #0FFH        ; Configura P2 como entrada (todos os bits em 1)
  	MOV A, P2            ; Lê o valor de P2

  	CJNE A, #0FFH, checa_Botoes   ; Se A não for 0xFF, verifica os botões
  	SJMP escolheOpcao                     
       
    checa_Botoes: ; Aguarde até que um botão seja pressionado
   	JNB P2.0, OPCAO1   ; Se P2.0 for 0, vai para OPCAO1  ; Verifica qual botão está pressionado, pulando para a opção correspondente
	JNB P2.1, OPCAO2   ; Se P2.1 for 0, vai para OPCAO2
    	JNB P2.2, OPCAO3   ; Se P2.2 for 0, vai para OPCAO3  
    	JNB P2.3, OPCAO4   ; Se P2.3 for 0, vai para OPCAO4

    	SJMP escolheOpcao          ; Retorna ao loop principal se nenhum botão está pressionado
       
    OPCAO1:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'F'  ; Exibir opção 1: "FUBA"
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	ACALL delay
	RET
       
      OPCAO2:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'C' ; Exibir opção 2: "CENOURA"
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
	ACALL delay
	RET
       
      OPCAO3:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'L' ; Exibir opção 3: "LARANJA"
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'J'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	ACALL delay
	RET
       
      OPCAO4:     	
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02H ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'C'  ; Exibir opção 4: "CHOCOLOTE"
 	ACALL sendCharacter
 	MOV A, #'H'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	ACALL delay
	RET
      	

      ;---------------------------------- 
       
      ;----------------------------------pedido confimado no display


      pedidoConfirmado:
	ACALL clearDisplay ; limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	CLR P1.7 ;seta p1.7 como baixo

	ACALL delayDisplay ; chama o delay do display

 	mov A, #05h ; move 05 para A
 	ACALL posicionaCursor  ; posiciona o cursor na posição 5

 	MOV A, #'P' ;exibe "PEDIDO" no display
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'D'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	CLR A ;limpa o A

 	mov A, #44h ; move 44 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 44

 	MOV A, #'R' ; exibe "RECEBIDO" no display
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
  	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'B'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

 	ACALL delayDisplay ; chama o delay do display

 	RET


      ;----------------------------------
       
      ;---------------------------------- pedido enviado para produção display


      enviadoProducao:
 	MOV A, #02h ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'E' ;exibe "ENVIADO PARA" no display
 	ACALL sendCharacter	
 	MOV A, #'N'
 	ACALL sendCharacter	
 	MOV A, #'V'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter	
 	MOV A, #'P'
 	ACALL sendCharacter	
 	MOV A, #'A'
 	ACALL sendCharacter	
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	
	CLR A ;limpa o A

 	mov A, #44h ; move 44 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 44

 	MOV A, #'P' ;exibe "PRODUCAO" no display
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
  	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

 	ACALL delayDisplay ; chama o delay do display
 	RET
       
	;------------------------------------------------------
      	;---------------------------------- confimando, em produção e  produção finalizada no display separadamente


      processando: 	
 	CLR A ;limpa o A

 	MOV A, #00h ; move 00 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 0

 	MOV A, #'E' ;exibe "EM PRODUCAO..." no display
 	ACALL sendCharacter	
 	MOV A, #'M'
 	ACALL sendCharacter	
 	MOV A, #' '
 	ACALL sendCharacter	
 	MOV A, #'P'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter
 	MOV A, #'.'
 	ACALL sendCharacter

	ACALL delayDisplay ; chama o delay do display para simular a produção
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display 

 	CLR A ;limpa o A

 	MOV A, #05h ; move 05 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 5

 	MOV A, #'P' ;exibe "PRODUCAO" no display
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'U'
 	ACALL sendCharacter
 	MOV A, #'C'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	CLR A ;limpa o A

 	mov A, #44h ; move 44 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 44

 	MOV A, #'F' ;exibe "FINALIZADA" no display
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
  	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'L'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'Z'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
      	
 	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	CLR P1.4 ;seta p1.4 como baixo
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

 	ACALL delayDisplay ; chama o delay do display
 	RET


	;-----------------------------------------------

	;---------------------------------------------- função de realizar pagamento


     realizaPagamento:
	MOV A, #02h ; move 02 para A
	ACALL posicionaCursor ; posiciona o cursor na posição 2

	MOV A, #'M' ;exibe "METODO DE" no display
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter
	MOV A, #' '
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter

	CLR A ;limpa o A

	MOV A, #44h ; move 44 para A
	ACALL posicionaCursor ; posiciona o cursor na posição 44

	MOV A, #'P' ;exibe "PAGAMENTO" no display
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	MOV A, #'G'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter
	MOV A, #'M'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'N'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter

	CLR A ;limpa o A

	ACALL clearDisplay ;limpa o display
	ACALL delayDisplay ; chama o delay do display

	MOV A, #04h ; move 04 para A
	ACALL posicionaCursor ; posiciona o cursor na posição 4

	MOV A, #'0' ;exibe "0.DEBITO" no display
	ACALL sendCharacter
	MOV A, #'.'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'B'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter


	MOV A, #04h ; move 04 para A
	ACALL posicionaCursor ; posiciona o cursor na posição 4

	MOV A, #'1' ;exibe "1.CREDITO" no display
	ACALL sendCharacter
	MOV A, #'.'
	ACALL sendCharacter
	MOV A, #'C'
	ACALL sendCharacter
	MOV A, #'R'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter

	CLR A ;limpa o A

 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display
	
	RET	


       	;----------------------------------

      	;---------------------------------- mensagem de confirmação do pagamento no display


confimaPagamento:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

 	MOV A, #02h ; move 02 para A
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'C' ;exibe "CONFIRMANDO" no display
 	ACALL sendCharacter	
 	MOV A, #'O'
 	ACALL sendCharacter	
 	MOV A, #'N'
 	ACALL sendCharacter	
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'R'
 	ACALL sendCharacter
 	MOV A, #'M'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	CLR A ;limpa o A

 	mov A, #43h ; posiciona o cursor na posição 43
 	ACALL posicionaCursor

 	MOV A, #'P' ;exibe "PAGAMENTO" no display
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'G'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'M'
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'T'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	CLR P1.3 ;seta p1.3 como baixo
 	CLR P1.4 ;seta p1.4 como baixo
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

 	ACALL delayDisplay ; chama o delay do display
 	RET


      ;----------------------------------
       
      ;---------------------------------- mensagem de pedido enviado no display


      enviado:
 	MOV A, #02h
 	ACALL posicionaCursor ; posiciona o cursor na posição 2

 	MOV A, #'S' ;exibe "SEU PEDIDO" no display
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'U'
 	ACALL sendCharacter	
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'P'
 	ACALL sendCharacter	
 	MOV A, #'E'
 	ACALL sendCharacter	
 	MOV A, #'D'
 	ACALL sendCharacter	
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	CLR A ;limpa o A

 	mov A, #41h
 	ACALL posicionaCursor ; posiciona o cursor na posição 41

 	MOV A, #'J' ;exibe "JA FOI ENVIADO" no display
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'F'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #' '
 	ACALL sendCharacter
 	MOV A, #'E'
 	ACALL sendCharacter
 	MOV A, #'N'
 	ACALL sendCharacter
 	MOV A, #'V'
 	ACALL sendCharacter
 	MOV A, #'I'
 	ACALL sendCharacter
 	MOV A, #'A'
 	ACALL sendCharacter
 	MOV A, #'D'
 	ACALL sendCharacter
 	MOV A, #'O'
 	ACALL sendCharacter

 	ACALL clearDisplay ;limpa o display

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

	ACALL delay100 ; chama o delay de 100 decrementações

	CLR P1.0 ;seta p1.0 como baixo
 	CLR P1.1 ;seta p1.1 como baixo
 	CLR P1.2 ;seta p1.2 como baixo
 	CLR P1.3 ;seta p1.3 como baixo
 	CLR P1.4 ;seta p1.4 como baixo
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

	ACALL delay100 ; chama o delay de 100 decrementações

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

	ACALL delay100 ; chama o delay de 100 decrementações

	CLR P1.0 ;seta p1.0 como baixo
 	CLR P1.1 ;seta p1.1 como baixo
 	CLR P1.2 ;seta p1.2 como baixo
 	CLR P1.3 ;seta p1.3 como baixo
 	CLR P1.4 ;seta p1.4 como baixo
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

	ACALL delay100 ; chama o delay de 100 decrementações

	SETB P1.0 ;seta p1.0 como alto
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

	ACALL delay100 ; chama o delay de 100 decrementações

	CLR P1.0 ;seta p1.0 como baixo
 	CLR P1.1 ;seta p1.1 como baixo
 	CLR P1.2 ;seta p1.2 como baixo
 	CLR P1.3 ;seta p1.3 como baixo
 	CLR P1.4 ;seta p1.4 como baixo
 	CLR P1.5 ;seta p1.5 como baixo
 	CLR P1.6 ;seta p1.6 como baixo
 	CLR P1.7 ;seta p1.7 como baixo

	ACALL delay100 ; chama o delay de 100 decrementações

	SETB P1.0 ;seta p1.0 como alto  
 	SETB P1.1 ;seta p1.1 como alto
 	SETB P1.2 ;seta p1.2 como alto
 	SETB P1.3 ;seta p1.3 como alto
 	SETB P1.4 ;seta p1.4 como alto
 	SETB P1.5 ;seta p1.5 como alto
 	SETB P1.6 ;seta p1.6 como alto
 	SETB P1.7 ;seta p1.7 como alto

 	ACALL delayDisplay ; chama o delay do display
 	RET

	;----------------------------------------

	;---------------------------------------- função de delay do display

   delayDisplay:
	MOV R1, #10            ; Número de iterações externas
   delay_outer:
  	MOV R0, #255           ; Número de iterações internas
   delay_inner:
  	DJNZ R0, delay_inner 
	DJNZ R1, delay_outer  
  	RET    

	;---------------------------------------

	;--------------------------------------- função do delay de 100 decrementações

	delay100: 
		MOV R0, #100
		DJNZ R0, $
		RET

	;--------------------------------------

	;-------------------------------------- função para escolher o pagamento

    escolhePagamento:
	MOV P2, #0FFH        ; Configura P2 como entrada (todos os bits em 1)
  	MOV A, P2            ; Lê o valor de P2
  	CJNE A, #0FFH, CHECABOTOES   ; Se A não for 0xFF, verifica os botões
  	SJMP escolhePagamento                     
       
	CHECABOTOES:
    	JNB P2.0, OPCAO_1   ; Se P2.0 for 0, vai para OPCA_1 
    	JNB P2.1, OPCAO_2   ; Se P2.1 for 0, vai para OPCAO_2

    	SJMP escolhePagamento          ; Retorna ao loop principal se nenhum botão está pressionado

   OPCAO_1:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ; chama o delay do display

	MOV A, #04h
	ACALL posicionaCursor ; posiciona o cursor na posição 04

	MOV A, #'D' ;exibe "DEBITO" no display
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'B'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter

	CLR A ;limpa o A
	RET

   OPCAO_2:
 	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay ;chama o delay do display

	MOV A, #04h
	ACALL posicionaCursor ; posiciona o cursor na posição 04

	MOV A, #'C' ;exibe "CREDITO" no display
	ACALL sendCharacter
	MOV A, #'R'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'D'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'O'
	ACALL sendCharacter

	CLR A ;limpa o A
	RET

	;------------------------------------------------------

	;----------------------------------------------------- função digite sua senha

   digiteSuaSenha:
	ACALL clearDisplay ;limpa o display
 	ACALL delayDisplay

	MOV A, #04h
	ACALL posicionaCursor ; posiciona o cursor na posição 4

	MOV A, #'D' ;exibe "DIGITE SUA" no display
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'G'
	ACALL sendCharacter
	MOV A, #'I'
	ACALL sendCharacter
	MOV A, #'T'
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #' '
	ACALL sendCharacter
	MOV A, #'S'
	ACALL sendCharacter
	MOV A, #'U'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter

	CLR A ;limpa o A

	MOV A, #44h 
	ACALL posicionaCursor ; posiciona o cursor na posição 44

	MOV A, #'S' ;exibe "SENHA" no display
	ACALL sendCharacter
	MOV A, #'E'
	ACALL sendCharacter
	MOV A, #'N'
	ACALL sendCharacter
	MOV A, #'H'
	ACALL sendCharacter
	MOV A, #'A'
	ACALL sendCharacter

	CLR A ; limpa o A

	RET

	;--------------------------------------

	;------------------------------------- função para receber a senha 

   pedeSenha:
	MOV TMOD, #20H         ; Timer 1 em modo 2
	MOV TH1, #-3           
	MOV SCON, #50H         ; Modo 1, 8 bits de dados, UART ativada
	SETB TR1               ; Inicia o Timer 1
  	ACALL UART_Read    ; Lê um caractere via UART
 	ACALL UART_Write
	RET   ; Escreve o caractere de volta via UART


   UART_Read:
    CLR A                  ; Limpa acumulador
   Wait_RX:
    JNB RI, Wait_RX        ; Espera até que o caractere seja recebido
    MOV A, SBUF            ; Move o caractere recebido para o acumulador
    CLR RI                 ; Limpa o flag de recepção
    RET

   UART_Write:
    MOV SBUF, A            ; Move o valor do acumulador para SBUF para transmissão
   Wait_TX:
    JNB TI, Wait_TX        ; Espera até que a transmissão seja concluída
    CLR TI                 ; Limpa o flag de transmissão
    RET
	                
      ;----------------------------------
